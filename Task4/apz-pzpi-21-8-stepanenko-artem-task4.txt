1 ОПИС АРХІТЕКТУРИ КЛІЄНТСЬКОЇ ЧАСТИНИ

Для написання клієнтської частини було обрано мову програмування C# із використанням HTML CSS, що забезпечую швидку розробку і зручність за рахунок статичної типізації.
	Для експортування даних сайту до PDF формату було використано бібліотеку Rotativa для ASP.NET Core додатків, яка надає готові інтрусемнти для створення простих документів.
	Для реалізації перегляду логів системи було використано бібліотеку Serilog із Serilog.Sinks.Seq. Ця бібліотека дозволяє переглядати логи системи використовуючи зручний та ефективний інтерфейс для перегляду інформації.
	Для реалізації перевірки даних користувача було використано бібліотеку jQuery. Ця бібліотека дозволяє зробити перевірку даних лише не клієнтській частині не використовуючи сервер зовсім.
	Для візуалізації використаних пакетів було розроблено діаграму пакетів (див. рис. 1).
	Розроблено клієнтську частину за допомогою архітектури Monolithic Architecture. Її відмінність за іншими це визначення єдиного доступу до бази даних із моделями та створення незалежних представлень.
	Структура цього архітектурного шаблону нагадують архів чи бібліотеку, де розташовано книги із томами. Ця архітектура дуже тісно пов’язана із MVC шаблоном проектування. Побудова структури починається з побудови моделей для використання у базі даних, контролера для обробки даних перед подачею до користувача, і представлення для виразу усієї бізнес логіки до користувача.
	Клієнтську частину можна розбити на такі компоненти: Views, Entities, DTO, Controllers, DbContext. Частина проекту Views зберігає усі представлення ролі користувача. Частини проекту Entities та DTO зберігають моделі об’єктів для використання їх із базою даних.
  Частина проекту Controllers зберігає усі контролери ролі користувача, які оброблюють користувацькі дані.
	Для більш детальної візуалізації архітектури системи було розроблено діаграму компонентів (див. додат. Б.1).
 
2 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

	Користувачами клієнтської частини розробленої системи є 3 типи акторів: адміністратор, власник закладу та охоронець.
	Основними можливостями власника закладу є: перегляд власної ділянки, перегляд власник замовлень, створення своїх замовлень, перегляд звітів від охоронців, можливість перегляду розрахованої плати працівникам, можливість редагування інформації про замовлення чи видалення, можливість видалення ділянки із системи.
	Основними можливостями охоронцю є: перегляд замовлень до яких закріплено, перегляд доступних замовлень, перегляд інформації про замовлення, перегляд звітів до замовлення, створення звіту до замовлення, перегляд власного інвентарю, перегляд доступного інвентарю, закріплення інвентарю до себе.
	Основними можливостями адміністратору є: перегляд рангів у системи, редагування даних рангу, перегляд ділянок у системи, редагування ділянок у системі, перегляд замовлень у системі, видалення замовлень, редагування замовлень, перегляд звітів у системі, видалення звітів.
	Взаємодію кожної ролі користувачів з клієнтською частиною системи представлено на діаграмі прецедентів (див. додат. А.1).
	Таким чином, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.

3 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Для написання клієнтської частини було обрано мову програмування C# із використанням HTML CSS, що забезпечую швидку розробку і зручність за рахунок статичної типізації.
	Для експортування даних сайту до PDF формату було використано бібліотеку Rotativa для ASP.NET Core додатків, яка надає готові інтрусемнти для створення простих документів.
	Для реалізації перегляду логів системи було використано бібліотеку Serilog із Serilog.Sinks.Seq. Ця бібліотека дозволяє переглядати логи системи використовуючи зручний та ефективний інтерфейс для перегляду інформації.
	Для реалізації перевірки даних користувача було використано бібліотеку jQuery. Ця бібліотека дозволяє зробити перевірку даних лише не клієнтській частині не використовуючи сервер зовсім.
	Для візуалізації використаних пакетів було розроблено діаграму пакетів (див. рис. 1).

4 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

  Розроблено клієнтську частину за допомогою архітектури Monolithic Architecture. Її відмінність за іншими це визначення єдиного доступу до бази даних із моделями та створення незалежних представлень.
	Структура цього архітектурного шаблону нагадують архів чи бібліотеку, де розташовано книги із томами. Ця архітектура дуже тісно пов’язана із MVC шаблоном проектування. Побудова структури починається з побудови моделей для використання у базі даних, контролера для обробки даних перед подачею до користувача, і представлення для виразу усієї бізнес логіки до користувача.
	Клієнтську частину можна розбити на такі компоненти: Views, Entities, DTO, Controllers, DbContext. Частина проекту Views зберігає усі представлення ролі користувача. Частини проекту Entities та DTO зберігають моделі об’єктів для використання їх із базою даних. Частина проекту Controllers зберігає усі контролери ролі користувача, які оброблюють користувацькі дані.
	Для більш детальної візуалізації архітектури системи було розроблено діаграму компонентів (див. додат. Б.1).

5 ПОБУДОВА ДІАГРАМИ ВЗАЄМОДІЇ

Взаємодія користувача із клієнтською частиною починається із введення даних профілю при реєстрації чи авторизації до системи. Під час реєстрації програма перевіряє введені дані і додає їх до системи. Під час авторизації програма перевіряє вхідні дані включаючи роль користувача і в залежності від ролі переходить до панелі адміністратора, сторінки власника, сторінки охоронця.
	Охоронець має можливість переглядати свої ділянки, до якого закріплений. Він може подивитись дані про ділянку, написати новий звіт, переглянути звіти чи відмовитись від замовлення до цієї ділянки. Охоронець має можливість мати свій інвентар, переходячи до сторінки його власного інвентарю він може переглянути увесь закріплений до нього інвентар та за бажанням відкріпити його. На сторінці усього інвентаря у системі він може переглянути увесь інвентар системи та закріпити його до себе за бажанням.
	Власник ділянки може переглядати свої ділянки та замовлення. Також він має можливість переглянути подробиці щодо замовлення чи ділянки. Є можливість перегляду звітів від охоронців. Реалізовано функціонал редагування, видалення даних.
	Адміністратор має функціонал усіх ролей. Він може переглядати ділянки, видаляти та редагувати. Адміністратор може переглядати замовлення, редагувати і видаляти. Адміністратор може переглядати звіти і видаляти їх. 
	Для більш детального представлення взаємодії користувачів було візуалізовано діаграму взаємодії (див. додат. В.1).

ВИСНОВКИ

У ході виконання лабораторної роботи були отримані навички з проєктування клієнтської частини програмної системи. Результатом роботи є розроблена програмна реалізація клієнтської частини програмної системи з використанням HTML CSS. При розробці продукту дотримувались вимоги до чистого коду мови програмування C#.



