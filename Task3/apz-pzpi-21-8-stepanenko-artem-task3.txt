1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ


	Користувачами IoT частини розробленої системи є один тип актора: працівник охоронець.
	Основними можливостями користувача є: можливість отримання інформації про одне з замовлень, отримання інформації про звіти на ділянці, відправка звіту із стандартним переліком даних.
	Взаємодію ролі цього типу користувача використовуючи IoT частину систему представлено на діаграмі прецедентів (див. рис. 1).

2 ПРОГРАМНА РЕАЛІЗАЦІЯ

	Демонстраційна програма можливостей розумного пристрою системи організації працівників приватного охоронного підприємства створена на мові програмування C++. Програмна реалізація максимально наближена до пристроїв RaspberryPi, які можуть запускати програми написані на C++. Причини цього вибору:
	- C++ є мовою компільованою, що дозволяє отримувати швидкий та оптимізований машинний код, який ефективно виконується на ресурсно-обмежених пристроях;
	- C++ має великий набір інструментів для розробки, налагодження та тестування програм, що полегшує процес створення надійного програмного забезпечення для IoT пристроїв.
	У додатку забезпечено відправка даних з серверу за допомогою JSON використовуючи зовнішню бібліотеку nlohmann json.
	Додаток було структуровано на модулях, які відповідають за певну функціональність у системи (приклад коду див. додат. Б.1-6):
	- WriteCallBack.cpp – модуль в якому реалізовано метод для обробки даних, які отримуються за допомогою бібліотеки libcurl(HTTP запиту);
	- PerformGetRequest.cpp – модуль в якому реалізовано метод для отримання даних серверу за кінцевою точкою для подальшої обробки у системі;
	- PerformPostRequest.cpp – модуль в якому реалізовано метод для відправки даних до серверу за кінцевою точкою для збереження даних у базі даних;
	- GetGuardReports.cpp – модуль в якому реалізовано метод для отримання звітів замовлення для подальшої демонстрації користувачу та аналізу отриманих даних;
	- PerformGetRequestOrderIds.cpp – модуль в якому реалізовано метод для отримання ідентифікаторів усіх замовлень до якого закріплено конкретного охоронця для подальшого отримання звітів та відправки звітів;
	- GetCurrentDateAsJsonString.cpp – модуль в якому реалізовано метод для отримання дати на теперішній час з конвертацією її у формат який сприймає JSON. 

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

	Для написання програмного застосунку IoT пристрою було обрано мову програмування C++. Основними причинами цього вибору є поширеність зовнішніх бібліотек, контролювання пам'яттю та можливість запуску її на IoT пристрої.
	Для створення HTTPS запитів та зв’язку із сервером було використано бібліотеку curl із vcpkg.
	Для отримання та відправки даних у форматі JSON було використано зовнішню бібліотеку nlohmann json із vcpkg.
	Для отримання даних системи для подальшого використання у системі було використано appSettings.json.
	Сама програма складається із _ складових.
	Для більш детальної візуалізації архітектури розроблюваного додатку та технологій, які були використані у системи, було створено діаграму пакетів (див. рис. 2).
Діаграма діяльності, що зображена на рисунку, представляє робочий процес розумного пристрою.
	Початковий крок:
	- пристрій отримає дані про охоронця з налаштування системи для подальшої роботи програми.
	Основний потік:
	- прикріплення даних до пристрою – дані охоронця прикріплюються до даних системи для подальшого використання без можливості аутентифікації;
	- перевірка наявності замовлень – програма перевіряє наявність замовлень у охоронця, якщо їх нема то завершуємо роботу, якщо є, навпаки, продовжуємо;
	- отримання даних про замовлення – отримання усієї інформації щодо замовлень прикріплених до охоронця;
	- перегляд опцій користувача – програма надає можливість вибору користувачу щодо наступних дій;
	- отримати звіти - програма надає інформацію про звіти у системі для подальшого перегляду і аналізу;
	- написати новий звіт – програма надає можливість створення нового звіту із описом та повідомленням;
	- отримати статистику – програма надає можливість перегляду обробки отриманих звітів за відсотком кожного у системі за типом;

ВИСНОВКИ


	У ході виконання лабораторної роботи були отримані навички проектування IoT частини програмної системи. Результатом роботи є розроблюваний додаток реалізований на мові C++ IoT частини. При розробці додатку було дотримано вимог до написання чистого коду мови програмування.

